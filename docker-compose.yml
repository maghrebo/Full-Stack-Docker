version: '3.7'
services:
  client:
      build:
        dockerfile: Dockerfile
        context: ./client
      volumes:
        #In questo modo dico a docker di usare la cartella del container /app/node_modules come volume
        #La cartella locale node_modules (se non ha modifiche) non verrà più copiata perchè il volume esiste già
        #Se c'è già l'immagine docker-compose non la builda
        - /app/node_modules 
        #Qui mappa tutto il contenuto della cartella locale client nella cartella app dell'immagine
        #Ricorda che la WORKDIR dell'immagine è la cartella app
        - ./client:/app
      ports:
        - 4200:4200
  server:
      build:
        dockerfile: Dockerfile
        context: ./server
      environment:
      - MONGO_INITDB_DATABASE=animal_db
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=pass
      volumes:
        - ./server:/app
      ports:
        - 5000:5000

  mongo-server:
    image: mongo:latest     #Possiamo specificare 'immagine anche da qui senza usare un Dockerfile
    hostname: test_mongodb  #cambia l'hostname da mongo-server a test_mongo
    environment:            #setta alcune variabili d'ambiente
      - MONGO_INITDB_DATABASE=animal_db
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=pass
    volumes:
      #Crea un nuovo bineded volume per il container di mongoDB (condividento il file init-db.js)
      # https://stackoverflow.com/questions/42912755/how-to-create-a-db-for-mongodb-container-on-start-up
      - ./mongo-server/init-db.js:/docker-entrypoint-initdb.d/init-db.js:ro    
    ports:
      - 27017:27017